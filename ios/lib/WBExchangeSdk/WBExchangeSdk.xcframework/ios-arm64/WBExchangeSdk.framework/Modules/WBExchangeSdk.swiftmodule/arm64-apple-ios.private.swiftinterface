// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios18.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name WBExchangeSdk
import Combine
import Foundation
import Swift
import SwiftUI
@_exported import WBExchangeSdk
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class WBExchangeSdkConfig : Combine.ObservableObject {
  public var showWebView: Swift.Bool {
    get
  }
  public var showLoader: Swift.Bool {
    get
  }
  public var hasTokens: Swift.Bool {
    get
  }
  public init(showLoaderIfNoToken: Swift.Bool = false, loginRequired: Swift.Bool = false)
  public func setTokens(accessToken: Swift.String, refreshToken: Swift.String)
  public func getUrl() -> Swift.String
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct WBExchangeView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(config: WBExchangeSdk.WBExchangeSdkConfig)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s13WBExchangeSdk0A4ViewV4bodyQrvp", 0) __
}

extension WBExchangeSdk.WBExchangeView : Swift.Sendable {}
